@use "sass:math";

@use "functions" as *;
@use "variables" as *;

// Styles
@mixin button-with-icon(
    $color: $black,
    $border-color: $gray,
    $background-color: $white-smoke,
    $hover-color: $white-smoke,
    $hover-border-color: $russian-violet,
    $hover-background-color: $russian-violet,
){
    $button-selector: &;

    --icon-size: 1.3rem;
    --icon-position-right: 0.5rem;
    --padding-inline: 1rem;
    --padding-block: 1rem;

    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;

    font-size: 1.1rem;

    color: $color;
    background-color: $background-color;

    padding-inline-start: var(--padding-inline);
    padding-inline-end: var(--padding-inline);
    padding-block-start: var(--padding-block);
    padding-block-end: var(--padding-block);

    border-width: 1px;
    border-color: $border-color;
    border-style: solid;
    border-radius: 3px;

    cursor: pointer;
    overflow: hidden;

    transition: padding-inline-end 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    will-change: padding-inline-end;

    &-icon {
        width: var(--icon-size);
        height: var(--icon-size);

        position: absolute;
        right: var(--icon-position-right);
        top: auto;
        bottom: auto;
        left: auto;

        display: flex;
        justify-content: center;
        align-items: center;
        width: 10%;

        fill: $color;

        translate: calc(var(--icon-size) + var(--icon-position-right)) 0;

        transition: translate 0.3s ease, fill 0.3s ease;
        will-change: translate;
    }

    &:hover {
        padding-inline-end: calc(var(--padding-inline) + var(--icon-size));

        background-color: $hover-background-color;
        border-color: $hover-border-color;
        color: $hover-color;

        #{$button-selector}-icon {
            translate: 0 0;
            fill: $hover-color;
        }
    }
}

@mixin hidden() {
    display: none;
    visibility: hidden;
    pointer-events: none;
}

@mixin visible() {
    display: block;
    visibility: visible;
    pointer-events: auto;
}

@mixin box-shadow($variant: "default"){
    @if ($variant == "default"){
        box-shadow: 
            rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, 
            rgba(14, 30, 37, 0.32) 0px 2px 16px 0px
        ;
    }

    @if ($variant == "inner"){
        box-shadow: 
            rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, 
            rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset
        ;
    }
}

@mixin underline-decoration($always-active: false){
    $base-selector: if($always-active == true, "&", '&:is([style*="--underline-color"],[style*="--underline-image"])');

    #{$base-selector}::after {
        position: relative;
        display: block;
        content: '';
        width: 80%;
        height: 0.5rem;

        margin-inline: auto;

        border-radius: 10px;

        background-image: var(--underline-image);
        background-color: var(--underline-color);
    }
}

// Animations

@mixin highlight-animation(
    $outline-width: 2px,
    $outline-offset: 2px,
    $background-color: rgba($white-smoke, 0),
    $animation-delay: 0s,
    $iteration-count: 3,
){
    $animation-id: unique-id();
    $outline-inset: calc(-1 * (#{$outline-offset} + #{$outline-width}));

    $linear-gradient-top: linear-gradient(to top, 
        #{$penn-red} 0%,
        #{$salmon-pink} 50%,
        #{$cool-gray} 100%
    );
    $linear-gradient-right: linear-gradient(to right, 
        #{$penn-red} 0%,
        #{$salmon-pink} 50%,
        #{$cool-gray} 100%
    );

    position: relative;

    &::after {
        content: "";
        position: absolute;
        z-index: -1;

        visibility: hidden;

        background: $linear-gradient-top;

        animation-name: element-highlight-animation-#{$animation-id};
        animation-duration: 1s;
        animation-timing-function: linear;
        animation-iteration-count: $iteration-count;
        animation-delay: $animation-delay;

        border-radius: 10px;
    }

    @keyframes element-highlight-animation-#{$animation-id} {
        0% {
            visibility: visible;
            
            top: calc(100% + #{$outline-offset});
            right: calc(100% + #{$outline-offset});
            bottom: $outline-inset;
            left: $outline-inset;

            background: $linear-gradient-top;
        }
        12.5% {
            top: $outline-inset;
            right: calc(100% + #{$outline-offset});
            bottom: $outline-inset;
            left: $outline-inset;

            background: $linear-gradient-top;
        }
        24.99% {
            top: $outline-inset;
            right: calc(100% + #{$outline-offset});
            bottom: calc(100% + #{$outline-offset});
            left: $outline-inset;

            background: $linear-gradient-top;
        } 
        25% {
            background: $linear-gradient-right;
        }
        37.5% {
            top: $outline-inset;
            right: $outline-inset;
            bottom: calc(100% + #{$outline-offset});
            left: $outline-inset;

            background: $linear-gradient-right;
        }
        49.99% {
            top: $outline-inset;
            right: $outline-inset;
            bottom: calc(100% + #{$outline-offset});
            left: calc(100% + #{$outline-offset});

            background: $linear-gradient-right;
        }
        50% {
            background: $linear-gradient-top; 
        }
        62.5% {
            top: $outline-inset;
            right: $outline-inset;
            bottom: $outline-inset;
            left: calc(100% + #{$outline-offset});

            background: $linear-gradient-top;
        }
        74.99% {
            top: calc(100% + #{$outline-offset});
            right: $outline-inset;
            bottom: $outline-inset;
            left: calc(100% + #{$outline-offset});

            background: $linear-gradient-top;
        }
        75% {
            background: $linear-gradient-right;
        }
        87.5% {
            top: calc(100% + #{$outline-offset});
            right: $outline-inset;
            bottom: $outline-inset;
            left: $outline-inset;

            background: $linear-gradient-right;
        }
        100% {
            top: calc(100% + #{$outline-offset});
            right: calc(100% + (#{$outline-offset} + #{$outline-width}));
            bottom: $outline-inset;
            left: $outline-inset;

            background: $linear-gradient-right;
        }
    }
}

@mixin underline-hover-animation(
    $color: var(--color),
    $focus-visible-outline-color: var(--focus-visible-outline-color),
    $width: 90%,
    $left: 0,
    $right: 0,
    $direction: "center"
) {
    $transform-origin-map: (
        "center": center,
        "left": left,
        "right": right
    );

    position: relative;
    outline-color: $focus-visible-outline-color;
    outline-style: solid;
    outline-width: 0px;

    @include with-priority {
        text-decoration: none;
    };

    &::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: $left;
        right: $right;
        width: $width;
        height: 0.1em;

        @if($direction == "left"){
            margin-inline-end: auto;
        } @else if($direction == "center"){
            margin-inline: auto;
        } @else if($direction == "right"){
            margin-inline-start: auto;
        } @else {
            @error "Direction must be one of the following: left, center or right";
        }

        background-color: $color;

        scale: 0 1;

        transform-origin: map-get($transform-origin-map, $direction);

        transition: get-transitions(
            (scale), 
            $duration: 300ms, 
            $timing-function: ease-in
        );
        will-change: scale;
    }

    &:hover::after, &:focus-visible::after  {
        scale: 1 1;
    }

    &:focus-visible {
        outline-offset: 4px;
        outline-width: 2px;
    }
}

@mixin item-hovering-animation(
    $transform-origin: center,
    $animation-duration: 5s,
    $animation-delay: 1s,
    $scale-to: 1.04,
    $scale-hover-multiplier: 0.98
){
    $animation-id: unique-id();
    
    transform-origin: $transform-origin;
    will-change: scale;

    animation-name: 
        element-item-starts-hovering-animation-#{$animation-id},
        element-item-hovering-animation-#{$animation-id}
    ;
    animation-duration: $animation-delay, $animation-duration;
    animation-timing-function: ease-in-out, ease-in-out;
    animation-iteration-count: 1, infinite;
    animation-delay: 0s, $animation-delay;

    @keyframes element-item-starts-hovering-animation-#{$animation-id} {
        from {
            scale: 1;
        }
        to {
            scale: $scale-to;
        }
    }

    @keyframes element-item-hovering-animation-#{$animation-id} {
        0% {
            scale: $scale-to;
        }
        50% {
            scale: $scale-to * $scale-hover-multiplier;
        }
        100% {
            scale: $scale-to;
        }
    }
}

// Set Fonts
@mixin set-font-faces($font-family, $fonts){
    @each $file, $info in $fonts {
        @font-face {
            font-family: $font-family;
            src: url(@assets/fonts/#{$file}.ttf) format('truetype');
            font-weight: map-get($info, 'weight');
            font-style: map-get($info, 'style');
        }
    }
}

// Misc
@mixin with-priority(
    $priority: 1
){
    &:is(*, #{get-priority-id($priority)}){
        @content;
    }
}

@mixin if-inline-style-has(
    $style: string
){
    &[style*=#{$style}]{
        @content;
    }
}

// Support Mixins
@mixin supports-has-selector(){
    @supports(selector(*:has(*))){
        @content;
    }
}

@mixin supports-linear-easing-function(){
    $linear-easing: linear(0, 1);
     
    @supports(animation-timing-function: #{$linear-easing}){
        @content;
    }
}

@mixin supports-line-clamp(){
    @supports(-webkit-line-clamp: 2){
        @content;
    }
}